# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_server import message_transmission_pb2 as message__transmission__pb2


class MessageTransmissionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.task_processor = channel.unary_unary(
                '/MessageTransmission/task_processor',
                request_serializer=message__transmission__pb2.MessageRequest.SerializeToString,
                response_deserializer=message__transmission__pb2.MessageReply.FromString,
                )
        self.get_queue_info = channel.unary_unary(
                '/MessageTransmission/get_queue_info',
                request_serializer=message__transmission__pb2.InfoRequest.SerializeToString,
                response_deserializer=message__transmission__pb2.InfoReply.FromString,
                )
        self.frame_processor = channel.unary_unary(
                '/MessageTransmission/frame_processor',
                request_serializer=message__transmission__pb2.FrameRequest.SerializeToString,
                response_deserializer=message__transmission__pb2.FrameReply.FromString,
                )


class MessageTransmissionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def task_processor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_queue_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def frame_processor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageTransmissionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'task_processor': grpc.unary_unary_rpc_method_handler(
                    servicer.task_processor,
                    request_deserializer=message__transmission__pb2.MessageRequest.FromString,
                    response_serializer=message__transmission__pb2.MessageReply.SerializeToString,
            ),
            'get_queue_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_queue_info,
                    request_deserializer=message__transmission__pb2.InfoRequest.FromString,
                    response_serializer=message__transmission__pb2.InfoReply.SerializeToString,
            ),
            'frame_processor': grpc.unary_unary_rpc_method_handler(
                    servicer.frame_processor,
                    request_deserializer=message__transmission__pb2.FrameRequest.FromString,
                    response_serializer=message__transmission__pb2.FrameReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageTransmission', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageTransmission(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def task_processor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageTransmission/task_processor',
            message__transmission__pb2.MessageRequest.SerializeToString,
            message__transmission__pb2.MessageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_queue_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageTransmission/get_queue_info',
            message__transmission__pb2.InfoRequest.SerializeToString,
            message__transmission__pb2.InfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def frame_processor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageTransmission/frame_processor',
            message__transmission__pb2.FrameRequest.SerializeToString,
            message__transmission__pb2.FrameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
